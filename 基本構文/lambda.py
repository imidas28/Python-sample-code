# Pythonでの「無名関数(匿名関数)」はlambda式で書ける。
# 名前を付けずに一度きり使う関数を定義できる仕組み。

# 基本構文
# lambda 引数: 戻り値
# defとは違って、1行でしか書けない(処理は1つだけ)という制約がある。

# 例1: 普通の関数定義との違い
# 普通の関数
def add(x, y):
    return x + y

result = add(10, 5)
print(result)


# 無名関数(匿名関数)
f = lambda x, y: x + y
result = f(5, 5)
print(result)


# 上記は、どちらも同じ動きをするが、lambdaの方は関数名が不要。
# 要なら変数に格納して後で使える。


# 例2: 一度きりの利用
# 通常は「その場でちょっとした処理を書く」用途で使います。

nums = [1, 2, 3, 4, 5]

# それぞれの数を2倍する。
doubled = list(map(lambda x: x * 2, nums))
print(doubled)


# map()はリストなどの要素を1ずつ関数に渡して、その結果を返す仕組み。
# 関数 ⇒ lambda x: x * 2
# データ ⇒ nums

# map(...)の戻り値はイテレータ(順番に値を取り出せるオブジェクト)なので、
# list()に変換して普通のリストにしている。

# nums は 処理対象のデータ（リスト）を指定するだけ
# 実際の処理は map() が内部で nums を1つずつ取り出して lambda に渡している
# lambda の引数 x が、nums の各要素そのもの を受け取ります