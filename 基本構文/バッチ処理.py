# 「バッチ」とは？
# ・定義：大量データを一定件数ごとの塊に分けて、まとめて処理する単位のこと。
# ・なぜ使う？
# ⇒メモリ節約：一度に全部を処理するとメモリが逼迫するため。
# ⇒スループット：1件ずつより、適度にまとめた方が埋め込みAPIやI/Oの効率が良い。
# ⇒安定運用：APIのレート制限やタイムアウトを避けやすい。

# サンプルデータ：0～999の数字リスト
data = list(range(1000))

# バッチサイズ
batch_size = 100

# 処理結果を格納するリスト
batch_sums = []

for i in range(0, len(data), batch_size): # 今回の場合10回繰り返す。
    batch = data[i:i + batch_size] # バッチを切り出す
    batch_sum = sum(batch) # バッチ内の数字の合計を計算
    batch_sums.append(batch_sum)
    print(f"Batch {i//batch_size +1} sum = {batch_sum}")

# スライス処理の流れ
# i = 0
# i + batch_size = 0 + 100 = 100
# スライス[0:100]はインデックス0から99までを取得する。
# 1回目のバッチ
# batch = [0,1,2,...99]
# sum(batch) = 0 + 1 + 2 ... + 99 = 4950


# range(start, stop, step) の意味
# start（第一引数） → 開始値（この数からスタートする）
# stop（第二引数） → 終了値（ただしこの値は含まれない！）
# step（第三引数） → 増分（ここではバッチサイズ）どれくらいずつ進むか（今回ならバッチサイズ）

# range(0, 300, 100) では step=100 なので、ループで使われる値は 0, 100, 200 だけです。
# 途中の 1〜99 や 101〜199 は ループで使われず、繰り返し回数にもカウントされません。



# // は 整数除算を意味します。
# ・普通の / は 割り算で小数も返す(通常の割り算 → 2.3333...)
# ・// は 割り算して小数部分を切り捨てて整数だけ返す(整数除算 → 2)