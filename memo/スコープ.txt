Pythonでは
・モジュールスコープ
・トップレベルスコープ
はほぼ同じ意味で使われる。

用語整理
・ローカルスコープ：関数やメソッドの中で作られる変数のスコープ
・モジュールスコープ(トップレベルスコープ)：その.pyファイル直下に書かれた変数や関数が存在するスコープ。
ファイル内全体から参照可能。
👉 だから global = 「モジュールスコープ（トップレベルスコープ）を使う」と覚えてOKです。

・ビルトインスコープ：Python がプログラム実行時に自動で用意している 最も上位のスコープ で、
　どのモジュールや関数からでもアクセスできる名前が格納されています。

1. ビルトインスコープにあるもの
大きく分けると次の3種類があります。
(1) 組み込み関数（built-in functions）
・どのファイルでもそのまま使える関数
・例：
print("Hello")    # 出力
len([1,2,3])      # 長さ
range(5)          # 0～4までの整数のイテレータ
sum([1,2,3])      # 合計
sorted([3,1,2])   # ソート
type(123)         # 型を返す

(2) 組み込み例外（built-in exceptions）
・エラーを表すクラス
・例：
ValueError
TypeError
IndexError
KeyError
ZeroDivisionError

(3) 組み込み定数（built-in constants）
・変更不可の値
・例：
True
False
None
Ellipsis
NotImplemented


実際のスコープ階層での位置
Python では LEGBルール で変数探索します：
・Local → 関数のローカル変数
・Enclosing → 外側の関数の変数（ネスト関数）
・Global → モジュールスコープ / トップレベル変数
・Builtin → Python が最初から持っている名前
つまり、関数内で len([1,2,3]) と書くと、
ローカル変数に len がなければ
モジュールスコープに len がなければ
ビルトインスコープの len が使われる、という流れです。