・作成するシステムの概要：
社内で過去に実施された大量のオンラインMTGの議事録ファイル内の情報をもとに社内ユーザーからの入力に対して回答を生成するRAGシステム（チャットボット）


・最終的なゴール：
開発したRAGシステムが期待通りに動作することを確認するため、動作検証用として以下のユーザー入力値を与えてください。
多くの企業が力を入れているマーケティング施策は何ですか？
上記の入力に対して期待する回答が返ってくること。
また、会話履歴の記憶機能が搭載されていることを確認するため、最終的に以下のユーザー入力値を与えてください。
100文字以内に要約して
適切に回答が生成された場合、RAGシステムの開発は完了です。


・外部参照先は、共有ドライブにある「オンラインMTG議事録」フォルダ：
Google Colaboratoryからでは、共有フォルダを直接マウント出来ないので、マイドライブにショートカットを作り、
マイドライブ経由でフォルダにアクセスすることとする。

Googleドライブとの接続（マウント）
from google.colab import drive
drive.mount('/content/drive')

外部参照先である「オンラインMTG議事録」フォルダのパス
dir_path = "/content/drive/MyDrive/オンラインMTG議事録"


・「オンラインMTG議事録」フォルダ内のデータについて：
「オンラインMTG議事録」フォルダの直下には「営業」「マーケティング」などテーマ別にフォルダが置かれており、ファイルは置かれていない：
「オンラインMTG議事録」フォルダ内の構造
営業
　　データベース化前
　　　　営業.docx
　　データベース化済み
マーケティング
　　データベース化前
　　　　マーケティング.docx
　　データベース化済み
採用
　　データベース化前
　　　　採用.docx
　　データベース化済み
開発
　　データベース化前
　　　　開発.docx
　　データベース化済み
教育
　　データベース化前
　　　　教育.docx
　　データベース化済み
全社
　　データベース化前
　　　　全社.docx
　　データベース化済み
顧客
　　見込み
　　　〇〇株式会社
　　　　データベース化前
　　　　　〇〇株式会社.docx
　　　　データベース化済み
　　既存
　　　〇〇株式会社
　　　　データベース化前
　　　　　〇〇株式会社.docx
　　　　データベース化済み

隠しフォルダの.dbは、RAGの外部参照先であるベクターストアのフォルダを格納するもの。
初期段階では「.db」フォルダ内は空。


・データベースの更新について：
各テーマのフォルダ内には、「データベース化前」と「データベース化済み」のフォルダがあります。
RAGシステム（チャットボット）の外部参照先としてデータベース化されるまでの流れ
1.オンラインMTG後、「tl;dv」で文字起こしされたテキストをコピーし、拡張子「.docx」のファイルに貼り付けて議事録ファイルを作成する。
2.議事録ファイルを、該当テーマフォルダ内の「データベース化前」フォルダ内に格納する
3.RAGシステムのプログラム実行時、「データベース化前」フォルダ内にはあるが「データベース化済み」フォルダ内にはない議事録ファイルについて、「データベース化済み」フォルダ内にコピーし、
内容のテキストをデータベース化（RAGの外部参照先として保存）する。

手順の「1」と「2」はイメージしやすいかと思います。これらの作業はプログラム実行前の事前準備として、手動で行うものです。
手順「3」は、RAGシステムのプログラム実行時に自動で行われるものです。

例えば「営業」フォルダ内の「データベース化前」フォルダと「データベース化済み」フォルダ内に、それぞれ以下のファイルが置かれているとします。

【「データベース化前」フォルダ内】

2024_10_09_営業.docx
2024_12_18_営業.docx
2024_12_19_営業.docx
【「データベース化済み」フォルダ内】

2024_10_09_営業.docx
2024_12_18_営業.docx

この場合、「2024_12_19_営業.docx」内の情報だけがまだデータベース化（RAGの外部参照先として保存）されていない状態です。
この状態でRAGシステムのプログラムを実行すると、データベース化済みの2つのファイルについては何も処理を行わず、
まだデータベース化されていない1つのファイル「2024_12_19_営業.docx」のみ、「データベース化済み」フォルダ内にコピーされ、
またRAGの外部参照先として追加でデータベース化されます。

つまりプログラム実行後、「データベース化前」と「データベース化済み」フォルダ内の中身はそれぞれ以下となります。
【「データベース化前」フォルダ内】

2024_10_09_営業.docx
2024_12_18_営業.docx
2024_12_19_営業.docx

【「データベース化済み」フォルダ内】

2024_10_09_営業.docx
2024_12_18_営業.docx
2024_12_19_営業.docx

すでにデータベース化済みであるかどうかは、「データベース化前」と「データベース化済み」の両方のフォルダ内を確認し「ファイル名」で判断します。
そのため、プログラム実行時に「データベース化前」と「データベース化済み」のそれぞれのフォルダ内のファイル名一覧を参照し、
「データベース化前」フォルダ内にはあるが「データベース化済み」フォルダ内にはないファイルが存在する場合、
そのファイル内のテキストをデータベース（ベクターストア）に追加した上で、
「データベース化済み」フォルダ内に同じファイル名でコピーするといった実装の流れとなります。


・作成するベクターストアについて：
外部参照先のデータを保存する「ベクターストア」と呼ばれるデータベースを作成する必要があります。
このベクターストアに保存されているデータをもとに、ユーザーからの入力に対して回答を生成するRAGシステム（チャットボット）を開発する。
「オンラインMTG議事録」フォルダ内の、「データベース化前」フォルダ内にはあるが「データベース化済み」フォルダ内にはないファイル内のテキストをベクターストアに追加していただきます。
初期段階では「データベース化済み」フォルダは全て空であるため、
各テーマフォルダ内の「データベース化前」フォルダ内にある全てのファイル内のテキストをベクターストアとして保存し、「データベース化済み」フォルダにファイルをコピーする必要があります。


今回は、「全テーマ横断のベクターストア」と「各テーマごとのベクターストア」を作成する。
外部参照先の元データが格納されている「オンラインMTG議事録」フォルダの直下には、テーマ別に以下の7つのフォルダが置かれています。
営業
マーケティング
採用
開発
教育
全社
顧客


プログラム実行後、7つの全テーマの【「データベース化前」フォルダ内にはあるが「データベース化済み」フォルダ内にはない議事録ファイルのテキスト】を保存するベクターストアが、「.all_chromadb」の名前で作成されるようにしてください。
また、全テーマ横断のベクターストアは、「オンラインMTG議事録」フォルダの直下に置かれている「.db」フォルダ内に作成してください。


各テーマごとのベクターストアについて：
RAGシステム開発時は、この「ノイズ」の存在を意識して回答精度向上に取り組む必要があります。
つまり「不要な情報は外部参照先（ベクターストア）に含めない」ということです。
例えば「営業」に関する質問をした場合、「営業」のテーマに特化したベクターストアをもとに回答を行ったり、
「マーケティング」に関する質問をした場合は「マーケテイング」のテーマに特化したベクターストアをもとに回答を行ったりというイメージです。

全テーマ横断のベクターストアに加え、各テーマごとのベクターストアも作成していただきます。
プログラム実行後、各テーマのフォルダごとにそれぞれ以下のように「.テーマ名_chromadb」の名前でベクターストアが作成されるようにしてください。
作成されるベクターストアの数は「7つ」です。
【プログラム実行後に作成される各テーマごとのベクターストアの一覧】
.営業_chromadb
.マーケティング_chromadb
.採用_chromadb
.開発_chromadb
.教育_chromadb
.全社_chromadb
.顧客_chromadb
また、これらのベクターストアは、「オンラインMTG議事録」フォルダの直下に置かれている「.db」フォルダ内に作成してください。


・あらかじめ用意されているリセット処理について：
実装したRAGシステムのプログラムを実行すると、「データベース化前」フォルダ内にはあるが
「データベース化済み」フォルダ内にはない議事録ファイルが「データベース化済み」フォルダにコピーされます。

また、「.db」フォルダ内に全テーマ横断の「.all_chromadb」フォルダと各テーマ横断の「.テーマ名_chromadb」フォルダが作成されます。

つまり実装したRAGシステムのプログラムを動作検証のために実行する際は、
「データベース化済み」フォルダと「.db」フォルダはファイルが入っていない空の状態である必要があります。

しかし、一度プログラムを実行してこれらのフォルダ内にファイルが生成された後、
動作検証のためにフォルダ内を空にする際、一つひとつ手動でファイルを削除するのは非常に手間。

リセット処理のコードを実装もすること。


要件の一覧
ここまでに説明した要件

「オンラインMTG議事録」フォルダ内で、「データベース化前」フォルダ内にはあるが「データベース化済み」フォルダ内にはない議事録ファイルをベクターストアに追加し、このベクターストア内の情報をもとにユーザー入力に対して回答するRAGシステムを開発してください。またプログラム実行時、この議事録ファイルが「データベース化済み」フォルダにコピーされるようにしてください。
「全テーマ横断のベクターストア（.all_chromadb）」と「各テーマごとのベクターストア（.テーマ名_chromadb）」を「.db」フォルダ内に作成してください。また、プログラム実行時に追加対象の議事録ファイルがそれぞれのベクターストアに追加されるようにしてください。
LLMによる回答生成に利用するのは「全テーマ横断のベクターストア」としてください。
「多くの企業が力を入れているマーケティング施策は何ですか？」というユーザー入力値をLLMに渡し、適切な回答が生成されるようにしてください。
動作検証用として、「データベース化済み」フォルダと「.db」フォルダ内の全ファイルを削除するリセット処理を実装してください。
あらかじめ解答用ファイルにデフォルト非表示でコードが用意されています。余裕があれば非表示のままとし、自力で実装してみてください。
その他の要件

拡張子「.docx」ファイルの読み込みには、Document loaderの「Docx2txtLoader」を使ってください。
RAGシステムに会話履歴の記憶機能を搭載してください。
最終的に「100文字以内に要約して」というユーザー入力値をLLMに渡し、適切な回答が生成されることを確認してください。
LLMからの回答が徐々に表示されるようストリーミング出力の機能を搭載してください。
すでにベクターストアが存在する場合は読み込み、存在しない場合は新規作成するよう分岐処理を行ってください。